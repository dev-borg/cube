
§ git-checkout

- git-checkout (1)
	° switch branches or restore working tree files

- usages:
	° change branch 
		> create too, if -b <branch> added
		> preseves working directory files, if possible (o/w requests commit)
	° checking out commits
		> displays commit state
		> does not change branch, unless branch specified
		> DETACHED_HEAD results
		> allows 
			~ retrieving historical commits
			~ testing changes in isolation
	° file deletion
		> delete files form working directory: git checkout -- <file>
		> 
	° restores files in working directory upon 
		> branch switch
		> commit request (previous commit in history)
	

- untracked files
	° git checkout <branch>
        ° upon performning a branch switch:
                > if not in conflict with branch being checked out to, will remain in base filesystem
                > otherwise, git request resolution to conflict before checking out to new branch

- <commit> -- <path/to/file>
	° temporarily check out files on another branch
	° find <commit> of branch of interest where sougth file state resides 
	° branch won't change
		° ie. HEAD won't move
		° contrast with no -- <path/to/file>: git checkout <commit>
	° file will appear in working directory
	° cat <file> to view
	° be careful if another file in current branch exists with same name as it will be overwritten!

 
